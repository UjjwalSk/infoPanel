CREATE TABLE Department(
    deptID INT PRIMARY KEY,
    deptName VARCHAR2(45) NOT NULL,
    officeNo INT NOT NULL
);

CREATE TABLE EMPLOYEE(
    employeeID INT PRIMARY KEY,
    fullName VARCHAR2(45) NOT NULL,
    contactNo INT UNIQUE NOT NULL,
    email VARCHAR2(45) UNIQUE NOT NULL,
    address VARCHAR2(60) NOT NULL,
    hiringDate DATE,
    deptID INT NOT NULL,
    FOREIGN KEY (deptID) references DEPARTMENT(DEPTID) ON DELETE CASCADE
);

CREATE TABLE EMPLOYEE_SAL_DETAILS(
    accountNo INT PRIMARY KEY,
    employeeID INT UNIQUE NOT NULL,
    accountName VARCHAR2(45) NOT NULL,
    salary FLOAT NOT NULL,
    deductions FLOAT,
    FOREIGN KEY (employeeID) references EMPLOYEE(employeeID) ON DELETE CASCADE
);

CREATE TABLE ADMINISTRATION(
    administratorID INT PRIMARY KEY,
    designation VARCHAR2(45),
    FOREIGN KEY (administratorID) REFERENCES EMPLOYEE(employeeID) ON DELETE CASCADE
);

CREATE TABLE MENTOR(
    mentorID INT PRIMARY KEY,
    FOREIGN KEY (mentorID) REFERENCES EMPLOYEE(employeeID) ON DELETE CASCADE
);

CREATE TABLE INSTRUCTOR(
    instructorID INT PRIMARY KEY,
    FOREIGN KEY (instructorID) REFERENCES EMPLOYEE(employeeID) ON DELETE CASCADE
);

CREATE TABLE GUARDIAN(
    guardianID INT PRIMARY KEY,
    fatherName VARCHAR2(45) NOT NULL,
    motherName VARCHAR2(45) NOT NULL,
    address VARCHAR2(60) NOT NULL,
    phoneNo INT NOT NULL
);

CREATE TABLE Student(
    studentID INT PRIMARY KEY,
    fullName varchar2(45) NOT NULL,
    DOB DATE NOT NULL,
    currAddress INT NOT NULL,
    gender CHAR(1) NOT NULL,
    phoneNo INT NOT NULL,
    email VARCHAR2(40) NOT NULL,
    deptID INT NOT NULL,
    guardianID INT NOT NULL,
    UNIQUE (phoneNo),
    UNIQUE (email),
    FOREIGN KEY (deptID) references DEPARTMENT(deptID) ON DELETE CASCADE,
    FOREIGN KEY (guardianID) references GUARDIAN(guardianID) ON DELETE CASCADE
);

CREATE TABLE Course(
    courseID INT PRIMARY KEY,
    courseName VARCHAR2(45) NOT NULL,
    credits INT NOT NULL,
    hours INT NOT NULL,
    numLectures INT NOT NULL,
    deptID INT NOT NULL,
    FOREIGN KEY (deptID) references DEPARTMENT(DEPTID) ON DELETE CASCADE
);

CREATE TABLE stud_visaDetails(
    studentID INT PRIMARY KEY,
    visaNo INT UNIQUE NOT NULL,
    visaStatus VARCHAR2(40) NOT NULL,
    FOREIGN KEY (studentID) REFERENCES Student(studentID) ON DELETE CASCADE
);

CREATE TABLE coop(
    coopID INT PRIMARY KEY,
    company_Name VARCHAR2(45) NOT NULL,
    position VARCHAR2(45) NOT NULL
);

CREATE TABLE student_has_coop(
    studentID INT PRIMARY KEY,
    duration INT NOT NULL,
    salary INT NOT NULL,
    coopID INT NOT NULL,
    FOREIGN KEY (studentID) REFERENCES Student(studentID) ON DELETE CASCADE,
    FOREIGN KEY (coopID) REFERENCES coop(coopID) ON DELETE CASCADE
);

CREATE TABLE studAcademicRecord(
    studentID INT PRIMARY KEY,
    lastCGPA FLOAT NOT NULL,
    currCGPA FLOAT NOT NULL,
    FOREIGN KEY (studentID) REFERENCES Student(studentID) ON DELETE CASCADE
);

CREATE TABLE attendance(
    studentID INT NOT NULL,
    curAttendance INT NOT NULL,
    totaleAttendance INT NOT NULL,
    courseID INT NOT NULL,
    FOREIGN KEY (studentID) REFERENCES Student(studentID) ON DELETE CASCADE,
    FOREIGN KEY (courseID) REFERENCES Course(courseID) ON DELETE CASCADE
);


CREATE TABLE GradeReport(
    reportID INT PRIMARY KEY,
    courseID INT NOT NULL,
    studentID INT NOT NULL,
    numericGrade FLOAT NOT NULL,
    semester INT NOT NULL,
    FOREIGN KEY (courseID) REFERENCES Course(courseID) ON DELETE CASCADE,
    FOREIGN KEY (studentID) REFERENCES Student(studentID) ON DELETE CASCADE
);

CREATE TABLE Fee_Payment(
    billID INT PRIMARY KEY,
    studentID INT NOT NULL,
    date_of_payment DATE NOT NULL,
    totalAmnt INT NOT NULL,
    Amount_Paid INT NOT NULL,
    semester INT NOT NULL,
    FOREIGN KEY (studentID) REFERENCES Student(studentID) ON DELETE CASCADE
);

CREATE TABLE feeDues(
    billID INT PRIMARY KEY,
    dueAmnt INT NOT NULL,
    FOREIGN KEY (billID) REFERENCES Fee_Payment(billID) ON DELETE CASCADE
);

CREATE TABLE student_registers_courses(
    studentID INT NOT NULL,
    courseID INT NOT NULL,
    registrationDate DATE,
    FOREIGN KEY (courseID) REFERENCES Course(courseID) ON DELETE CASCADE,
    FOREIGN KEY (studentID) REFERENCES Student(studentID) ON DELETE CASCADE
);

CREATE TABLE BUILDING(
    buildingID INT PRIMARY KEY,
    buildingName VARCHAR(45) NOT NULL  
);

CREATE TABLE ROOM(
    roomNO INT PRIMARY KEY,
    buildingID INT NOT NULL,
    capacity INT NOT NULL,
    FOREIGN KEY (buildingID) references building(buildingID) ON DELETE CASCADE
);

CREATE TABLE GROUPS(
    groupNo INT PRIMARY KEY,
    courseID INT NOT NULL,
    instructorID INT NOT NULL,
    mentorID INT NOT NULL,
    buildingID INT NOT NULL,
    FOREIGN KEY (courseID) REFERENCES Course(courseID) ON DELETE CASCADE,
    FOREIGN KEY (instructorID) REFERENCES INSTRUCTOR(instructorID) ON DELETE CASCADE,
    FOREIGN KEY (mentorID) REFERENCES MENTOR(mentorID) ON DELETE CASCADE,
    FOREIGN KEY (buildingID) REFERENCES BUILDING(buildingID) ON DELETE CASCADE
);

CREATE TABLE Group_dayslot(
    day VARCHAR(10) NOT NULL,
    groupNo INT NOT NULL,
    startTime INTERVAL DAY TO SECOND(2) NOT NULL,
    endTime INTERVAL DAY TO SECOND(2) NOT NULL,
    FOREIGN KEY (groupNo) REFERENCES GROUPS(groupNo) ON DELETE CASCADE
);

CREATE TABLE assignment(
    assignmentID INT PRIMARY KEY,
    groupNo INT NOT NULL,
    deadlineDate DATE NOT NULL,
    maxScore INT NOT NULL,
    FOREIGN KEY (groupNo) REFERENCES GROUPS(groupNo) ON DELETE CASCADE
);

CREATE TABLE assignment_submissions(
    assignmentID INT PRIMARY KEY,
    studentID INT NOT NULL,
    submissionDate DATE NOT NULL,
    evaluationDate DATE NOT NULL,
    marksObtained INT NOT NULL,
    FOREIGN KEY (assignmentID) REFERENCES assignment(assignmentID) ON DELETE CASCADE,
    FOREIGN KEY (studentID) REFERENCES Student(studentID) ON DELETE CASCADE
);

CREATE TABLE Librarian(
    librarianID INT PRIMARY KEY,
    FOREIGN KEY (librarianID) REFERENCES EMPLOYEE(employeeID) ON DELETE CASCADE
);

CREATE TABLE BOOK(
    bookID INT PRIMARY KEY,
    bookName VARCHAR2(45)
);

CREATE TABLE Librarian_maintains(
    bookID INT PRIMARY KEY,
    librarianID INT NOT NULL,
    amount FLOAT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (bookID) references BOOK(bookID) ON DELETE CASCADE,
    FOREIGN KEY (librarianID) references Librarian(librarianID) ON DELETE CASCADE
);

CREATE TABLE Book_has_copies(
    copyNo INT PRIMARY KEY,
    bookID INT NOT NULL,
    status CHAR NOT NULL,
    FOREIGN KEY (bookID) references BOOK(bookID) ON DELETE CASCADE
);

CREATE TABLE instructor_has_books(
    copyNo INT PRIMARY KEY,
    instructorID INT NOT NULL,
    issueDate DATE NOT NULL,
    returnDate DATE NOT NULL,
    FOREIGN KEY (copyNo) references Book_has_copies(copyNo) ON DELETE CASCADE,
    FOREIGN KEY (instructorID) references INSTRUCTOR(instructorID) ON DELETE CASCADE
);

CREATE TABLE student_issues_books(
    copyNo INT PRIMARY KEY,
    studentID INT NOT NULL,
    issueDate DATE NOT NULL,
    returnDate DATE NOT NULL,
    FOREIGN KEY (copyNo) references Book_has_copies(copyNo) ON DELETE CASCADE,
    FOREIGN KEY (studentID) references Student(studentID) ON DELETE CASCADE
);





▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬	
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬	
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬	

